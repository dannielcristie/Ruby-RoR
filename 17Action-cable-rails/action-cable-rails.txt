# Action Cable
    - Existem aplicações com funcionalidades que precisam sempre se manter atualizadas a medida que eventos acontecem, como por exemplo um chat, uma notificação, a edição de um conteúdo de forma compartilhada e etc. 

    - Esses tipos de funcionalidades são chamadas de Realtime e para facilitar sua implementação em um projeto Ruby on Rails contamos com uma ferramenta chamada Action Cable.

## HTPP vs Websocket

Até o momento utilizamos apenas o protocolo web HTTP para realizar a comunicação entre o cliente e o servidor. Para seu funcionamento o cliente deve sempre enviar uma requisição e esperar por uma resposta do servidor e essa não é uma boa forma de manter uma aplicação atualizada pois você teria que realizar requisições a todo momento.

Para isso existe um protocolo chamado Websocket, o qual possibilita uma conexão bidirecional entre o cliente e o servidor, onde o servidor poderá fazer contato com o cliente sempre que houver uma nova atualização.

O Action Cable então utiliza o Websocket tendo em vista as vantagens de comunicação citadas acima e por consequência a construção de aplicações Realtime com Ruby on Rails são bem performáticas.


=====================================================================================================================================================

# Configuração inicial

1- Abra o terminal, navegue até o local onde você guarda seus projetos e crie um novo projeto chamado **chat**

    * rails new chat

2- Entre dentro da pasta do projeto
    
    cd chat

3- É necessário criar um canal para tornar possível a conexão entre o cliente e o servidor. Faça isso através da seguinte instrução:
    
    * rails g channel chat speak


5- Dentro do arquivo `app/channels/chat_channel.rb ` adicione a seguinte instrução dentro do método subscribed

        def subscribed
            stream_from "chat_channel"
        end

6- Ainda no mesmo arquivo, substitua o método speak pelo código que vem a seguir

    def speak(data)
        ActionCable.server.broadcast("chat_channel", { message: data['message'] })
    end

=====================================================================================================================================================

# Criando a view do chat

1- Utilize o generator de criação de controller para criar o controller e views da página do chat

    rails g controller Chat room

2- Adicione o código HTML da view no arquivo `app/views/chat/room.html.erb`+

        <div class='center'>
        <h1>Room</h1>
        <div id='messages'>
        </div>

        <form class='chat-form-content'>
            <label type='text' for='message_to_sent'>Mensagem: </label>
            <input type='text' id='message_to_sent' autocomplete="off" />
        </form>
        </div>


3- Para deixar a página mais organizada, insira o css que vem a seguir dentro do arquivo `app/assets/stylesheets/application.css`

        .center {
        text-align: center;
        margin-bottom: 100px;
        }

        .chat-form-content {
        position: fixed;
        bottom:40px;
        width: 100%;
    }

6- Para que seja possível visualizar que a conexão funcionou adicione o seguinte código dentro do método **connected()** no arquivo `app/javascript/channels/chat_channel.js`

        connected() {
            console.log("Connected to the chat room!");
        }

=====================================================================================================================================================




=====================================================================================================================================================




=====================================================================================================================================================