
# Criando a primeira view

Como você já viu anteriormente o Rails utiliza o padrão MVC por convenção e por isso o próximo passo neste momento é criar o controller e as views para o Post.

## Passo a Passo

1- Utilize um generator para criar o controller Posts
    * rails g controller Posts

2- Defina uma action chamada **index** dentro do controller criado no passo anterior

   * def index
     @posts = Post.all
     end

3- É preciso mapear a rota para a action **index** dentro do arquivo `config/routes.rb`

    * get '/posts', to: 'posts#index'

4- Com toda essa estrutura criada, agora o passo final é criar a view que será renderizada pelo seu controller. 

    - Dentro da pasta `app/views/posts`, crie um arquivo chamado `index.html.erb`

5- Adicione o seguinte conteúdo dentro desse arquivo

<h1>Posts</h1>

<% if @posts %>
  <% @posts.each do |post| %>
    <%= post.title %>
  <% end %>
<% else %>
  <p>Nenhum post cadastrado</p>
<% end %>



6- Perceba que é possível executar código rails dentro de uma view através da utilização de tags especiais. 

Veja a seguir o significado dessas tags:

-   <%= Código %>
   — Insere o resultado da expressão em sua página html.

-   <% Código %>
  
   — Executa a instrução, porém, não retorna nenhum valor para a sua página html.

-   <%# COMMENT %>
  
   — Comenta a declaração da tag.

7- As validações allow_nil adicionadas no model Post durante as missões do último módulo só fazem sentido quando utilizadas em conjunto com outras validações. Por isso remova elas para seguir esta aula.

8- Crie um novo post através do **rails console** e depois atualize a página index de posts para visualizar a mudança.



# Layout da aplicação


## Conhecendo um layout

1- Veja o layout padrão gerado pelo Ruby on Rails abrindo o arquivo app/views/layouts/application.html.erb

2- O código `<%= yield %> ` define onde deve ser renderizado o conteúdo de uma action dentro do layout.

Por isso você não precisa definir as tags html, head e body dentro da view de alguma action. O layout padrão da aplicação já adiciona essa estrutura para você.


## Criando um layout

Por causa da real possibilidade  da necessidade de mais de um layout dentro da mesma aplicação o rails permite que você utilize quantos layouts quiser. Um exemplo básico disso é um site que possui um layout para usuários não autenticados e um layout para os autenticados. 

Você deve criar todos os seus layouts dentro da past `app/views/layouts`

1- Crie um novo layout chamado `post.html.erb`

2- Adicione o seguinte conteúdo dentro dele
 

<!DOCTYPE html>
<html>
  <head>
    <title>Blog - Posts </title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <h1>Dominando o Ruby on Rails</h1>
    </br>
    <%= yield %>
  </body>
</html>


3- Para utilizar o layout criado nos passos anteriores utilize o método `layout` após a definição da classe Posts em `app/controllers/posts_controller.rb`
  * layout 'post'

  Obs: Agora todas as views de Posts compartilharão a mesma estrutura presente dentro desse layout.

4- Levante o servidor, abra a página index de Posts e veja como ela está sendo renderizada

5- Também é possível fazer a definição de layout para uma action em específico através da renderização da resposta.

  * def index
      @posts = Post.all
      render layout: "application"
    end


6- Atualize a página index de Posts novamente para ver o resultado da configuração anterior.