
# Criando a primeira view

Como você já viu anteriormente o Rails utiliza o padrão MVC por convenção e por isso o próximo passo neste momento é criar o controller e as views para o Post.

## Passo a Passo

1- Utilize um generator para criar o controller Posts
    * rails g controller Posts

2- Defina uma action chamada **index** dentro do controller criado no passo anterior

   * def index
     @posts = Post.all
     end

3- É preciso mapear a rota para a action **index** dentro do arquivo `config/routes.rb`

    * get '/posts', to: 'posts#index'

4- Com toda essa estrutura criada, agora o passo final é criar a view que será renderizada pelo seu controller. 

    - Dentro da pasta `app/views/posts`, crie um arquivo chamado `index.html.erb`

5- Adicione o seguinte conteúdo dentro desse arquivo

<h1>Posts</h1>

<% if @posts %>
  <% @posts.each do |post| %>
    <%= post.title %>
  <% end %>
<% else %>
  <p>Nenhum post cadastrado</p>
<% end %>



6- Perceba que é possível executar código rails dentro de uma view através da utilização de tags especiais. 

Veja a seguir o significado dessas tags:

-   <%= Código %>
   — Insere o resultado da expressão em sua página html.

-   <% Código %>
  
   — Executa a instrução, porém, não retorna nenhum valor para a sua página html.

-   <%# COMMENT %>
  
   — Comenta a declaração da tag.

7- As validações allow_nil adicionadas no model Post durante as missões do último módulo só fazem sentido quando utilizadas em conjunto com outras validações. Por isso remova elas para seguir esta aula.

8- Crie um novo post através do **rails console** e depois atualize a página index de posts para visualizar a mudança.


================================================================================================================================================


# Layout da aplicação


## Conhecendo um layout

1- Veja o layout padrão gerado pelo Ruby on Rails abrindo o arquivo app/views/layouts/application.html.erb

2- O código `<%= yield %> ` define onde deve ser renderizado o conteúdo de uma action dentro do layout.

Por isso você não precisa definir as tags html, head e body dentro da view de alguma action. O layout padrão da aplicação já adiciona essa estrutura para você.


## Criando um layout

Por causa da real possibilidade  da necessidade de mais de um layout dentro da mesma aplicação o rails permite que você utilize quantos layouts quiser. Um exemplo básico disso é um site que possui um layout para usuários não autenticados e um layout para os autenticados. 

Você deve criar todos os seus layouts dentro da past `app/views/layouts`

1- Crie um novo layout chamado `post.html.erb`

2- Adicione o seguinte conteúdo dentro dele
 

<!DOCTYPE html>
<html>
  <head>
    <title>Blog - Posts </title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <h1>Dominando o Ruby on Rails</h1>
    </br>
    <%= yield %>
  </body>
</html>


3- Para utilizar o layout criado nos passos anteriores utilize o método `layout` após a definição da classe Posts em `app/controllers/posts_controller.rb`
  * layout 'post'

  Obs: Agora todas as views de Posts compartilharão a mesma estrutura presente dentro desse layout.

4- Levante o servidor, abra a página index de Posts e veja como ela está sendo renderizada

5- Também é possível fazer a definição de layout para uma action em específico através da renderização da resposta.

  * def index
      @posts = Post.all
      render layout: "application"
    end


6- Atualize a página index de Posts novamente para ver o resultado da configuração anterior.


================================================================================================================================================


# Removendo a complexidade das views com Helpers

  - O Ruby on Rails conta com algo chamado Helpers para remover das páginas html as lógicas complexas do seu código e por fim tornar seu projeto mais organizado.
  - Além disso, um helper também pode ser reutilizado em mais de uma página, evitando a repetição de código.
  - Por padrão, o rails já inicia um projeto com alguns helpers predefinidos, mas também existe a possibilidade de você criar seus próprios helpers.


## Helpers predefinidos

1- Abra o projeto **blog**, navegue até a página **index** de **Posts** e substitua seu conteúdo pelo código a seguir para  apresentar os dados por meio de uma tabela

      <h1>Posts</h1>

      <% if @posts %>
        <table>
          <thead>
            <tr>
              <th>Title</th>
              <th>Created</th>
            </tr>
          </thead>
          <tbody>
            <% @posts.each do |post| %>
              <tr>
                <td><%= post.title %></td>
                <td><%= post.created_at</td>
              </tr>
            <% end %>
          </tbody>
        </table>
      <% else %>
        <p> No results found </p>
      <% end %>



2- Utilize o helper **time_ago_in_words** para formatar a data em que o post foi criado

          <td><%= time_ago_in_words(post.created_at) %> ago</td>



4- Também é possível utilizar os helpers dentro do **Rails Console** com a variável **helper**

helper.number_to_human(100000)



## Escrevendo seus próprios helpers

Perceba que na aplicação **blog** existe uma pasta localizada dentro de **app** chamada **helpers**. Ela é destinada para a escrita dos seus próprios helpers. 

Cada arquivo presente dentro desta pasta símboliza onde os helpers poderão ser acessados, sendo que, quando o nome do arquivo é **application_helper.rb** trata-se de algo padrão que foi iniciado junto à sua aplicação equanto arquivos com o nome de um controller são criados por um genenator de um Controller. 

Essas duas divisões ajudam a saber onde criar um helper, pois todos os heleprs definidos dentro do arquivo **application_helper.rb**  estarão disponíveis para todas as views da sua aplicação, enquanto os helpers com o nome do controller estarão disponíveis apenas na view desse controller. 



Um Helper nada mais é do que um método.
1- Crie seu primeiro helper dentro de `app/helpers/authors_helper.rb`

      module AuthorsHelper
        def number_of_posts(author)
          if author.posts.count > 0
            author.posts.count
          else
            'None'
          end
        end
      end



2- Agora, utilize o helper criado anteriormente dentro da sua view `app/views/authors/index.html.erb`

      <th>Description</th>
      <th>Posts</th>
      <th colspan="3"></th>
      
        <td><%= author.description %></td>
        <td><%= number_of_posts(author) %></td>
        <td><%= link_to 'Show', author %></td>




3- Suba sua aplicação e veja como ficou o projeto depois da inserção do helper que conta a quantidade de posts  de um autor.


  docs:   https://mixandgo.com/learn/the-beginners-guide-to-rails-helpers

          https://www.rubyguides.com/2020/01/rails-helpers/

          https://api.rubyonrails.org/v6.1.3.1/classes/ActionView/Helpers.html


================================================================================================================================================

# Utilizando Partils
    - Uma página html pode conter uma extensa quantidade de linhas de código e para facilitar o gerenciamento dessas páginas existe algo chamado Partials o que permite dividir   uma página em vários pedaços organizados e possivelmente reutilizáveis.


1- Para renderizar a partial como uma parte da view, utilize o helper **render** como no exemplo a seguir
  <%= render "menu" %>

2- Toda nome de uma partial começa com o símbolo `_` 
  - Crie sua primeira partial dentro de `app/view/posts` com o nome de **_form.html.erb**

3- Insira o seguinte conteúdo dentro dela

  - Minha primeira partial

4- Adicione um before_action dentro do controller Posts para atribuir o valor de um post para os métodos edit e update
    * before_action :set_post, only: %i[show edit update destroy]
  
      private

      def set_post
        @post = Post.find(params[:id])
      end

5- Crie os seguintes métodos dentro do controller Posts

      def show
      end
      
      def new
        @post = Post.new
      end

      def edit
      end

      def create
      end

      def update
      end

      def destroy
      end


6- Agora que você criou todos os métodos para realização de um CRUD substitua essa linha dentro do arquivo `config/routes.rb`


    get '/posts', to: 'posts#index'
  por essa
    resources :posts


7- Depois de definir as rotas, crie seguintes arquivos dentro da pasta `app/views/posts`

* `new.html.erb`
* `edit.html.erb`
* `show.html.erb`

8- Renderize a partial `_form.html.erb` de Posts dentro das views **new** e **edit** com a seguinte instrução
   * <%= render partial: 'form', locals: { post: @post } %>

  - Perceba que essa é uma forma diferente da primeira que você viu, exatamente porque você está passando uma variável para a partial que está renderizando.

9- Levante sua aplicação e veja que a página new e edit de Posts está renderizando a partial que você acabou de definir.



================================================================================================================================================

# Criação de um formulário

Um formulário html possibilita o contato do usuário com a sua aplicação, provendo para ele uma forma de interação por meio do envio de dados para criação de um novo registro, para alteração de um registro existente, para realizar uma busca, etc. O problema é que escrever e manter um formulário pode se tornar um processo tedioso por causa do controle de atributos presentes nele e para facilitar sua vida como programador o Rails conta com o Form Helpers.

Através desses Helpers predefinidos presentes por padrão em sua aplicação é muito fácil criar e gerenciar um formulário e nessa aula eu vou te mostrar como utilizá-los.



## Criando seu primeiro formulário

1- Para criar o seu primeiro formulário com o Form Helper abra o projeto blog no seu editor de texto preferido

2- Depois substitua o conteúdo da partial **_form.html.erb** presente em `app/views/posts`

    <%= form_with do |form| %>
      Form contents
    <% end %>

O form with é um helper que ajuda na definição de um formulário

3- Levante sua aplicação

4- Acesse este link para visualizar o resultado do código que você adicionou

  htpp://localhost:3000/posts/new

5- Faça uma inspeção da página pra ver o código html gerado

6- Também é possível utilizar helpers para criação de elementos dentro do formulário.

Utilize o trecho de código a seguir para criar o seu primeiro input

    <%= form.label :query, "Search for:" %>
    <%= form.text_field :query %>
    <%= form.submit "Search" %>

Obs: Adicione o código dentro do formulário

7- Atualize a página e veja o input que foi gerado

8- Também é possível configurar a url e método que o formulário deve utilizar durante a sua definição

    <%= form_with url: "/search", method: :get do |form| %>

9- Atualizando a página você não percebe nenhuma mudança, porém, ao inspecioná-la é possível ver que as duas configurações foram aplicadas ao formulário


## Criando um formulário para um objeto do Active Record

Em uma aula passada, você enviou uma variável local para a partial **_form.html.erb** que representa o objeto de um Post no Active Record e quando você utiliza esse objeto na definição de um formulário o Ruby on Rails vai saber quando o formulário deve ser para criar ou alterar um registro.



1- Substitua o código da partial **_form** para criar o formulário que cria/altera um post

    <%= form_with(model: post) do |post_form| %>
      <%= post_form.label :title %>
      <%= post_form.text_field :title %>

      <%= post_form.label :content %>
      <%= post_form.text_area :content, size: "60x10" %>

      <%= post_form.label :publish_at %>
      <%= post_form.datetime_local_field :publish_at %>

      <%= post_form.label :author_id, 'Author' %>
      <%= post_form.select :author_id, 
          Author.all.map { |a| [a.first_name.to_s + ' ' + a.last_name.to_s, a.id] } %>
      </br></br>
      <%= post_form.submit %>
    <% end %>

2- Em meio ao número de novas informações você pode imaginar que é muito complicado saber de tudo isso, mas na verdade você não precisa ter esse conhecimento de cor. Sempre utilize a documentação para encontrar uma descrição de como você deve inserir algum elemento que deseja

https://guides.rubyonrails.org/form_helpers.html


================================================================================================================================================