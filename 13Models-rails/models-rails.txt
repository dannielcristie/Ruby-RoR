# Models 

## Models são criadas pelo Active Record, por meio do Generator do Rails.

### Convenção de nomes:
    - O nome da Model deve esta no singular;
    - o Generator pluralizar as tables;
exemplos:
    * Model = Article (nome do Model usa CamelCase) | Table = articles  (nome do Table sempre estará em letras minúsculas e no plural);
    * Model = LineItem (nome do Model usa camelCase mesmo que composto) | Table = line_items  (Table como nome composto  letras minúsculas com '_');

### Convenção de Schema:
    - O Active Record usar convenção para as colunas das tabelas,
exemplos:
    * Chave Estrageira = por padrão se usar,'singularized_table_name_id';
    * Chave Primária = por padrão se usar, 'id'

## Gerando um Model

 - Na pasta do projeto se usar o comando
    ** rails g model Address(nome da model) country:string(nome da coluna e tipo de dado) **

- Atualmente o Ruby on Rails suporta os seguintes tipos de dados:

    - `:binary`
    - `:boolean`
    - `:date`
    - `:datetime`
    - `:decimal`
    - `:float`
    - `:integer`
    - `:primary_key`
    - `:string`
    - `:text`
    - `:time`
    - `:timestamp`

qaq# Migrations

## Migrations é uma forma de versionar as tabelas de um banco de dados de uma aplicação, elas são criadas a parti da models

## Migrations no rails

### Executar migrations ja criadas no projeto rails:
    * rails db:migrate

### alterar uma tabelas ja existente :
    
    - adicionar coluna:
        * rails g migration Add[Nomedacoluna]To[Nomedatabela] [coluna]:[tipo de dado]
        exemplo:
            rails g migration AddDescriptionToAuthor description:string
        
    - Remover uma coluna:
        * rails g migration Remove[Nomedacoluna]From[Nomedatabela] [coluna]:[tipo de dado]
        exemplo:
            rails g migration RemoveDescriptionFromAuthor description:string

    - Reverter uma migration ja executada:
        * rails db:rollback
        apos isso bastar fazer a alteração no arquivo da migration e executar novamente

    
    obs: 
        todos os comando de alteração seguem o CamelCase;
        sempre se executar as migration com * rails db:migrate * apos uma alteração.


