# Models 

## Models são criadas pelo Active Record, por meio do Generator do Rails.

### Convenção de nomes:
    - O nome da Model deve esta no singular;
    - o Generator pluralizar as tables;
exemplos:
    * Model = Article (nome do Model usa CamelCase) | Table = articles  (nome do Table sempre estará em letras minúsculas e no plural);
    * Model = LineItem (nome do Model usa camelCase mesmo que composto) | Table = line_items  (Table como nome composto  letras minúsculas com '_');

### Convenção de Schema:
    - O Active Record usar convenção para as colunas das tabelas,
exemplos:
    * Chave Estrageira = por padrão se usar,'singularized_table_name_id';
    * Chave Primária = por padrão se usar, 'id'

## Gerando um Model

 - Na pasta do projeto se usar o comando
    ** rails g model Address(nome da model) country:string(nome da coluna e tipo de dado) **

- Atualmente o Ruby on Rails suporta os seguintes tipos de dados:

    - `:binary`
    - `:boolean`
    - `:date`
    - `:datetime`
    - `:decimal`
    - `:float`
    - `:integer`
    - `:primary_key`
    - `:string`
    - `:text`
    - `:time`
    - `:timestamp`

qaq# Migrations

## Migrations é uma forma de versionar as tabelas de um banco de dados de uma aplicação, elas são criadas a parti da models

## Migrations no rails

### Executar migrations ja criadas no projeto rails:
    * rails db:migrate

### alterar uma tabelas ja existente :
    
    - adicionar coluna:
        * rails g migration Add[Nomedacoluna]To[Nomedatabela] [coluna]:[tipo de dado]
        exemplo:
            rails g migration AddDescriptionToAuthor description:string
        
    - Remover uma coluna:
        * rails g migration Remove[Nomedacoluna]From[Nomedatabela] [coluna]:[tipo de dado]
        exemplo:
            rails g migration RemoveDescriptionFromAuthor description:string

    - Reverter uma migration ja executada:
        * rails db:rollback
        apos isso bastar fazer a alteração no arquivo da migration e executar novamente

    
    obs: 
        todos os comando de alteração seguem o CamelCase;
        sempre se executar as migration com * rails db:migrate * apos uma alteração.


# Validação de Dados
    Para segurança de uma aplicação Ruby on Rails, o Active Record fornece uma forma de validar os dados antes que eles sejam salvos no banco de dados. Isso é muito importante para manter a consistência do que é salvo e por isso eu te mostrarei nesta aula como realizar esse tipo de validação.

## Active Record Validations
    - validações sao feita no arquivo com o nome da tabela na pasta model
        * app/models/[nomedatabela].ruby
    - No arquivo tem uma classe com o nome da tabela herdando outra classe do Active Record,
    - para criar validações basta criar um metodo chamado *validates* e as propriedades sera as validações

##  validates helpers:
    acceptance
    validates_associated
    confirmation
    comparison
    exclusion
    format
    inclusion
    length
    numericality
    presence
    absence
    uniqueness
    validates_with
    validates_each

    doc: https://guides.rubyonrails.org/active_record_validations.html#validation-helpers


# Callback de um model (Active Record Callback):
    - É um codigo que dever ser executado, durante o ciclo de vida um model, nas etpas de Criar, Salvar, atualizar, excluir, validar e carregar um objeto;
    - Esse codigo é um metodo privado dentro da model do projeto (./app/models/[projeto].rb);
    - É possivel adicionar uma condição usando :if ou :unless, com Proc ou block;
    - É possivel definir em qual operação CRUD o Callback dever ser executado, on: :[operação CRUD](symbol);

    exemplo:
        *  after_validation :titleize_last_name, if: Proc.new { |a| a.last_name.present? }, on: :create*
              after_validation :titleize_last_name, = tipo de Callback e seu metodo que ela ira executar
              if: Proc.new { |a| a.last_name.present? }, = condicional 
              on: :create = em qual operação CRUD será executada.

## Tipos de Callback para um model;

    ### callbacks para criação de objetos     
        - Creating an Object
            before_validation
            after_validation
            before_save
            around_save
            before_create
            around_create
            after_create
            after_save
            after_commit / after_rollback   

    ### callbacks para update de objetos     
        - Updating an Object
            before_validation
            after_validation
            before_save
            around_save
            before_update
            around_update
            after_update
            after_save
            after_commit / after_rollback
   
    ### callbacks para destruição  de objetos     
        - Destroying an Object
            before_destroy
            around_destroy
            after_destroy
            after_commit / after_rollback

doc: https://guides.rubyonrails.org/active_record_callbacks.html