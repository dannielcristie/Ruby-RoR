# Models 

## Models são criadas pelo Active Record, por meio do Generator do Rails.

### Convenção de nomes:
    - O nome da Model deve esta no singular;
    - o Generator pluralizar as tables;
exemplos:
    * Model = Article (nome do Model usa CamelCase) | Table = articles  (nome do Table sempre estará em letras minúsculas e no plural);
    * Model = LineItem (nome do Model usa camelCase mesmo que composto) | Table = line_items  (Table como nome composto  letras minúsculas com '_');

### Convenção de Schema:
    - O Active Record usar convenção para as colunas das tabelas,
exemplos:
    * Chave Estrageira = por padrão se usar,'singularized_table_name_id';
    * Chave Primária = por padrão se usar, 'id'

## Gerando um Model

 - Na pasta do projeto se usar o comando
    ** rails g model Address(nome da model) country:string(nome da coluna e tipo de dado) **

- Atualmente o Ruby on Rails suporta os seguintes tipos de dados:

    - `:binary`
    - `:boolean`
    - `:date`
    - `:datetime`
    - `:decimal`
    - `:float`
    - `:integer`
    - `:primary_key`
    - `:string`
    - `:text`
    - `:time`
    - `:timestamp`

qaq# Migrations

## Migrations é uma forma de versionar as tabelas de um banco de dados de uma aplicação, elas são criadas a parti da models

## Migrations no rails

### Executar migrations ja criadas no projeto rails:
    * rails db:migrate

### alterar uma tabelas ja existente :
    
    - adicionar coluna:
        * rails g migration Add[Nomedacoluna]To[Nomedatabela] [coluna]:[tipo de dado]
        exemplo:
            rails g migration AddDescriptionToAuthor description:string
        
    - Remover uma coluna:
        * rails g migration Remove[Nomedacoluna]From[Nomedatabela] [coluna]:[tipo de dado]
        exemplo:
            rails g migration RemoveDescriptionFromAuthor description:string

    - Reverter uma migration ja executada:
        * rails db:rollback
        apos isso bastar fazer a alteração no arquivo da migration e executar novamente

    
    obs: 
        todos os comando de alteração seguem o CamelCase;
        sempre se executar as migration com * rails db:migrate * apos uma alteração.


# Validação de Dados
    Para segurança de uma aplicação Ruby on Rails, o Active Record fornece uma forma de validar os dados antes que eles sejam salvos no banco de dados. Isso é muito importante para manter a consistência do que é salvo e por isso eu te mostrarei nesta aula como realizar esse tipo de validação.

## Active Record Validations
    - validações sao feita no arquivo com o nome da tabela na pasta model
        * app/models/[nomedatabela].ruby
    - No arquivo tem uma classe com o nome da tabela herdando outra classe do Active Record,
    - para criar validações basta criar um metodo chamado *validates* e as propriedades sera as validações

##  validates helpers:
    acceptance
    validates_associated
    confirmation
    comparison
    exclusion
    format
    inclusion
    length
    numericality
    presence
    absence
    uniqueness
    validates_with
    validates_each

    doc: https://guides.rubyonrails.org/active_record_validations.html#validation-helpers


# Callback de um model (Active Record Callback):
    - É um codigo que dever ser executado, durante o ciclo de vida um model, nas etpas de Criar, Salvar, atualizar, excluir, validar e carregar um objeto;
    - Esse codigo é um metodo privado dentro da model do projeto (./app/models/[projeto].rb);
    - É possivel adicionar uma condição usando :if ou :unless, com Proc ou block;
    - É possivel definir em qual operação CRUD o Callback dever ser executado, on: :[operação CRUD](symbol);

    exemplo:
        *  after_validation :titleize_last_name, if: Proc.new { |a| a.last_name.present? }, on: :create*
              after_validation :titleize_last_name, = tipo de Callback e seu metodo que ela ira executar
              if: Proc.new { |a| a.last_name.present? }, = condicional 
              on: :create = em qual operação CRUD será executada.

## Tipos de Callback para um model;

    ### callbacks para criação de objetos     
        - Creating an Object
            before_validation
            after_validation
            before_save
            around_save
            before_create
            around_create
            after_create
            after_save
            after_commit / after_rollback   

    ### callbacks para update de objetos     
        - Updating an Object
            before_validation
            after_validation
            before_save
            around_save
            before_update
            around_update
            after_update
            after_save
            after_commit / after_rollback
   
    ### callbacks para destruição  de objetos     
        - Destroying an Object
            before_destroy
            around_destroy
            after_destroy
            after_commit / after_rollback

doc: https://guides.rubyonrails.org/active_record_callbacks.html


# Operações no banco com Models
    - O Active record é usado para mapear uma tabela do banco, logo o model da tabela pode ser udado para realizar operações nela.
    - operação pode ser feitas atraves do rails console

## Operações CRUD:

    ### Create

        1 - metodo direto no model
        *[Model].create([atributo]: [valor_atributo])
        
        2 instancia a model(a model é um objeto)
            * objeto = [Model].new
            * objeto.[atributo]= valor_atributo
            * objeto.save
    
    ### Read

        1 - listar todos
            * [Model].all
        
        2 - listar o primeiro registro da tabela
            * [Model].first
        
        3 - listar um unico registro por um parametro
            * objeto = [Model].find_by([atributo]: valor_atributo)

        4 - listar varios registros por um parametro em comum
            * objeto = [Model].where([atributo]: valor_atributo)

    ### Update

        1 - localizar o registro pra ser alterado e faça a alteração
            * objeto = [Model].find_by([atributo]: valor_atributo)
            * objeto.[atributo]=  novo_valor_atributo
            * objeto.save
        
    ### Delete

         1 - localizar o registro pra ser deletado e faça deletar
            * objeto = [Model].find_by([atributo]: valor_atributo)
            * objeto.destroy

        2 - deletar direto do model
            *[Model].destroy_by([atributo]: valor_atributo)
        
        3 - deletar todos os registros
            * [Model].destroy_all


# Associando dois models
    - Em um banco de dados relacional existe o relacionamento entre tabelas e para facilitar operações envolvendo esses relacionamentos você pode utilizar o Active Record para mapear eles.


## Tipos de associações
    belongs_to
    has_one
    has_many
    has_many :through
    has_one :through
    has_and_belongs_to_many


Essas associações são necessárias para mapear os diferentes tipos de relacionamentos.

## Relacionamentos
    - One-to-One e One-to-Many que são os principais presentes em aplicações 


### One-to-One
1- Estando no local do seu projeto, crie a migration para adicionar a referência de Author a tabela Address
    *   rails g migration AddAuthorReferenceToAddress author:references
    
    - Essa migration criará a chave estrangeira na tabela Address.

2- Execute a migration com o comando
    * rails db:migrate

3- Faça uso do **belongs_to** no model `app/models/address.rb` para mapear o relacionamento de Endereço com o Autor.
    *  belongs_to :author

    - O belongs_to indica que Address possui uma referência de Author.

4- Agora, para mapear a associação de Author com Address, utilize o **has_one**  no model `app/models/author.rb`
    *   has_one :address, dependent: :destroy

    - O has_one indica que um model está associado a outro, sendo esta uma relação One-to-One.
    - Isso significa que o Autor possui apenas um Endereço.
    - A propriedade `dependent: :destroy` significa que quando você excluir um autor, o endereço também deverá ser excluído

### One-to-Many

Para mapear o relacionamento One-to-Many vamos pensar que um Autor pode ter mais de um Endereço.

1- Neste caso a associação belongs_to deve continuar mapeada no model **Address**.

2- Substitua  `has_one :address` por `has_many :addresses` dentro do model `app/models/author.rb`

Você sempre deverá mapear relacionamentos do tipo **has_many** utilizando o nome do relacionamento no plural.


# Carregando dados no Rails - Seeds

Muitas das aplicações web precisam de uma base inicial de dados para funcionar. Um bom exemplo dessa base  pode ser a criação de um usuário admin; alguns tipos de Tags;  uma lista de Categorias e etc... 

O problema é que nos ambientes de desenvolvimento e teste o banco de dados pode ser apagado com frequência, e então, para facilitar esse processo repetitivo de inicialização o Rails conta com o **seeds**, que ajuda a  automatizar essa tarefa.


## Utilizando o seeds

1- O **seeds** nada mais é do que um arquivo ruby localizado em `db/seeds`

2- Você pode escrever qualquer código Ruby on Rails dentro do **seeds**

3- Abra o projeto blog através do seu editor de texto favorito e navegue até o arquivo seeds

4- Adicione duas instruções dentro deste arquivo para adicionar dois autores a base de dados inicial do seu projeto

    * Author.create(first_name: 'Stephen', last_name: 'King')
    * Author.create(first_name: 'Stephen', last_name: 'Hawking')

5- Para apagar o banco de dados, criar ele novamente e então popular o banco com o seeds que você configurou utilize o seguinte comando
    * rails db:reset

6- Na versão 6 do rails também é possível apagar todos os registros do banco e popular ele novamente com o conteúdo do seeds com a task replant
    * rails db:seed:replant