# Webpack
    -É um empacotador de módulos que permite a escrita de códigos front-end de forma compreensível aos desenvolvedores para depois transformar isso em algo que será melhor processado pelo navegador.
    - Através dele você conseguirá manipular códigos Javascript, CSS e coisas estáticas como imagens e fontes e por causa da sua popularidade, diversas bibliotecas possuem um passo a passo de instalação utilizando ele.

## Webpacker

Um projeto padrão contém uma biblioteca chamada **Webpacker**, a qual é responsável por tornar possível a utilização do **Webpack** dentro do Ruby on Rails.

## Integração de frameworks

Através do Webpacker é possível integrar frameworks **front-end** a um projeto **Rails** como por exemplo:

* Angular
* React
* VueJS
* Typescript


E tudo isso de uma forma bem simples, como no comando a seguir:

    rails webpacker:install:react

## Como utilizar

Por causa da utilização do Webpack existe algo dentro de um projeto Ruby on Rails chamado Pack, que de forma ideal deve ser utilizado para concentrar o carregamento e inicialização de alguns arquivos ou bibliotecas. Esses packs devem ser definidos dentro de `app/javascript/packs`  e um exemplo disso é um arquivo que já vem por padrão chamado `applications.js`.  Tudo que tem o nome **application** dentro do Ruby on Rails significa a base de algo e neste caso trata-se de um arquivo que é direcionado ao Javascript base da aplicação.


1- Abra o probjeto **blog** por meio do seu editor de textos favorito.

2- Navegue até o arquivo `app/views/layouts/application.html.erb` e veja que para utilizar o **pack**  application dentro do seu projeto, basta apenas empregar o método **javascript_tag**
    
    %= javascript_pack_tag "application" %>
 
3- O Webpack não tem nenhuma opinião sobre como você deve escrever seu código fonte, porém, ele deve ser adicionado dentro de `app/javascript` (lembre-se apenas de que isso deve ocorrer fora da pasta **packs**).


======================================================================================================================================================

# Asset Pipeline

Caso você ainda não saiba, o Webpacker é um ferramenta nova dentro do Ruby on Rails e antes da sua adoção todo o processamento de gerência dos assets era realizado por uma ferramenta chamada Asset Pipeline, que é algo   construido a partir de uma biblioteca chamada **sprockets-rails**. 

Suas principais características são:

* Concentrar Assets
* Minificar ou Compactar o Asset
* Codificação através de linguagens de alto nível, como por exemplo Sass para CSS, CoffeeScript para JavaScript, e ERB para ambos

## Como utilizar

Para utilizar essa ferramenta basta apenas que você adicione os assets do seu projeto a pasta `app/assets`

## Compilação

Como dito anteriormente o Rails utiliza estratégias para aumentar a performance da renderização dos assets do seu projeto no ambiente de produção e para que isso seja feito você deve ter ciência de que é preciso compilar esses arquivos antes que uma nova alteração seja enviada.

Para isso  tenha em mente que você deve utilizar o seguinte comando:

    RAILS_ENV=production rails assets:precompile

Esse comando irá compilar tanto arquivos presentes no Asset Pipeline quanto no Webpack

======================================================================================================================================================
# Sprockets vs Webpacker

As duas ferramentas irão compilar o código front-end de uma forma amigável para o ambiente de desenvolvimento e otimizado para o ambiente produção, mas o que pode gerar dúvida é que apesar das semelhanças, porque atualmente um novo projeto Ruby on Rails vem com as duas integradas por padrão?

A resposta é que o Sprockets foi desenhado para se encaixar com a forma em que o Rails trabalha e por isso permite que códigos sejam adicionados aos assets de um projeto através de gems, enquanto o Webpacker se torna uma solução mais interessante para a utilização de ferramentas mais recentes do Javascript e pacotes do NPM.

Atualmente a configuração padrão do Rails é que os arquivos css sejam processados pelo Sprockets e os Javascript pelo Webpacker, mas nada impede que tudo seja feito através do Webpacke